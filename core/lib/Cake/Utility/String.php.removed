<?php
/*
 * @ https://EasyToYou.eu - IonCube v10 Decoder Online
 * @ PHP 5.2
 * @ Decoder version: 1.0.4
 * @ Release: 02/06/2020
 *
 * @ ZendGuard Decoder PHP 5.2
 */

class String
{
    public static function uuid()
    {
        $node = env("SERVER_ADDR");
        if (strpos($node, ":") !== false) {
            if (substr_count($node, "::")) {
                $node = str_replace("::", str_repeat(":0000", 8 - substr_count($node, ":")) . ":", $node);
            }
            $node = explode(":", $node);
            $ipSix = "";
            foreach ($node as $id) {
                $ipSix .= str_pad(base_convert($id, 16, 2), 16, 0, STR_PAD_LEFT);
            }
            $node = base_convert($ipSix, 2, 10);
            if (strlen($node) < 38) {
                $node = null;
            } else {
                $node = crc32($node);
            }
        } else {
            if (empty($node)) {
                $host = env("HOSTNAME");
                if (empty($host)) {
                    $host = env("HOST");
                }
                if (!empty($host)) {
                    $ip = gethostbyname($host);
                    if ($ip === $host) {
                        $node = crc32($host);
                    } else {
                        $node = ip2long($ip);
                    }
                }
            } else {
                if ($node !== "127.0.0.1") {
                    $node = ip2long($node);
                } else {
                    $node = null;
                }
            }
        }
        if (empty($node)) {
            $node = crc32(Configure::read("Security.salt"));
        }
        if (function_exists("hphp_get_thread_id")) {
            $pid = hphp_get_thread_id();
        } else {
            if (function_exists("zend_thread_id")) {
                $pid = zend_thread_id();
            } else {
                $pid = getmypid();
            }
        }
        if (!$pid || 65535 < $pid) {
            $pid = mt_rand(0, 4095) | 16384;
        }
        list($timeMid, $timeLow) = explode(" ", microtime());
        $uuid = sprintf("%08x-%04x-%04x-%02x%02x-%04x%08x", (int) $timeLow, (int) substr($timeMid, 2) & 65535, mt_rand(0, 4095) | 16384, mt_rand(0, 63) | 128, mt_rand(0, 255), $pid, $node);
        return $uuid;
    }
    public static function tokenize($data, $separator = ",", $leftBound = "(", $rightBound = ")")
    {
        if (empty($data) || is_array($data)) {
            return $data;
        }
        $depth = 0;
        $offset = 0;
        $buffer = "";
        $results = array();
        $length = strlen($data);
        $open = false;
        while ($offset <= $length) {
            $tmpOffset = 0 - 1;
            $offsets = array(strpos($data, $separator, $offset), strpos($data, $leftBound, $offset), strpos($data, $rightBound, $offset));
            for ($i = 0; $i < 3; $i++) {
                if ($offsets[$i] !== false && ($offsets[$i] < $tmpOffset || $tmpOffset == 0 - 1)) {
                    $tmpOffset = $offsets[$i];
                }
            }
            if ($tmpOffset !== 0 - 1) {
                $buffer .= substr($data, $offset, $tmpOffset - $offset);
                if ($data[$tmpOffset] == $separator && $depth == 0) {
                    $results[] = $buffer;
                    $buffer = "";
                } else {
                    $buffer .= $data[$tmpOffset];
                }
                if ($leftBound != $rightBound) {
                    if ($data[$tmpOffset] == $leftBound) {
                        $depth++;
                    }
                    if ($data[$tmpOffset] == $rightBound) {
                        $depth--;
                    }
                } else {
                    if ($data[$tmpOffset] == $leftBound) {
                        if (!$open) {
                            $depth++;
                            $open = true;
                        } else {
                            $depth--;
                            $open = false;
                        }
                    }
                }
                $offset = ++$tmpOffset;
            } else {
                $results[] = $buffer . substr($data, $offset);
                $offset = $length + 1;
            }
        }
        if (empty($results) && !empty($buffer)) {
            $results[] = $buffer;
        }
        if (!empty($results)) {
            $data = array_map("trim", $results);
        } else {
            $data = array();
        }
        return $data;
    }
    public static function insert($str, $data, $options = array())
    {
        $defaults = array("before" => ":", "after" => null, "escape" => "\\", "format" => null, "clean" => false);
        $options += $defaults;
        $format = $options["format"];
        $data = (array) $data;
        if (empty($data)) {
            return $options["clean"] ? String::cleaninsert($str, $options) : $str;
        }
        if (!isset($format)) {
            $format = sprintf("/(?<!%s)%s%%s%s/", preg_quote($options["escape"], "/"), str_replace("%", "%%", preg_quote($options["before"], "/")), str_replace("%", "%%", preg_quote($options["after"], "/")));
        }
        if (strpos($str, "?") !== false && is_numeric(key($data))) {
            $offset = 0;
            while (($pos = strpos($str, "?", $offset)) !== false) {
                $val = array_shift($data);
                $offset = $pos + strlen($val);
                $str = substr_replace($str, $val, $pos, 1);
            }
            return $options["clean"] ? String::cleaninsert($str, $options) : $str;
        }
        asort($data);
        $hashKeys = array();
        foreach ($data as $key => $value) {
            $hashKeys[] = crc32($key);
        }
        $tempData = array_combine(array_keys($data), array_values($hashKeys));
        krsort($tempData);
        foreach ($tempData as $key => $hashVal) {
            $key = sprintf($format, preg_quote($key, "/"));
            $str = preg_replace($key, $hashVal, $str);
        }
        $dataReplacements = array_combine($hashKeys, array_values($data));
        foreach ($dataReplacements as $tmpHash => $tmpValue) {
            $tmpValue = is_array($tmpValue) ? "" : $tmpValue;
            $str = str_replace($tmpHash, $tmpValue, $str);
        }
        if (!isset($options["format"]) && isset($options["before"])) {
            $str = str_replace($options["escape"] . $options["before"], $options["before"], $str);
        }
        return $options["clean"] ? String::cleaninsert($str, $options) : $str;
    }
    public static function cleanInsert($str, $options)
    {
        $clean = $options["clean"];
        if (!$clean) {
            return $str;
        }
        if ($clean === true) {
            $clean = array("method" => "text");
        }
        if (!is_array($clean)) {
            $clean = array("method" => $options["clean"]);
        }
        switch ($clean["method"]) {
            case "html":
                $clean = array_merge(array("word" => "[\\w,.]+", "andText" => true, "replacement" => ""), $clean);
                $kleenex = sprintf("/[\\s]*[a-z]+=(\")(%s%s%s[\\s]*)+\\1/i", preg_quote($options["before"], "/"), $clean["word"], preg_quote($options["after"], "/"));
                $str = preg_replace($kleenex, $clean["replacement"], $str);
                if ($clean["andText"]) {
                    $options["clean"] = array("method" => "text");
                    $str = String::cleaninsert($str, $options);
                }
                break;
            case "text":
                $clean = array_merge(array("word" => "[\\w,.]+", "gap" => "[\\s]*(?:(?:and|or)[\\s]*)?", "replacement" => ""), $clean);
                $kleenex = sprintf("/(%s%s%s%s|%s%s%s%s)/", preg_quote($options["before"], "/"), $clean["word"], preg_quote($options["after"], "/"), $clean["gap"], $clean["gap"], preg_quote($options["before"], "/"), $clean["word"], preg_quote($options["after"], "/"));
                $str = preg_replace($kleenex, $clean["replacement"], $str);
        }
        return $str;
    }
    public static function wrap($text, $options = array())
    {
        if (is_numeric($options)) {
            $options = array("width" => $options);
        }
        $options += array("width" => 72, "wordWrap" => true, "indent" => null, "indentAt" => 0);
        if ($options["wordWrap"]) {
            $wrapped = wordwrap($text, $options["width"], "\n");
        } else {
            $wrapped = trim(chunk_split($text, $options["width"] - 1, "\n"));
        }
        if (!empty($options["indent"])) {
            $chunks = explode("\n", $wrapped);
            $i = $options["indentAt"];
            for ($len = count($chunks); $i < $len; $i++) {
                $chunks[$i] = $options["indent"] . $chunks[$i];
            }
            $wrapped = implode("\n", $chunks);
        }
        return $wrapped;
    }
    public static function highlight($text, $phrase, $options = array())
    {
        if (empty($phrase)) {
            return $text;
        }
        $default = array("format" => "<span class=\"highlight\">\\1</span>", "html" => false, "regex" => "|%s|iu");
        $options = array_merge($default, $options);
        extract($options);
        if (is_array($phrase)) {
            $replace = array();
            $with = array();
            foreach ($phrase as $key => $segment) {
                $segment = "(" . preg_quote($segment, "|") . ")";
                if ($html) {
                    $segment = "" . "(?![^<]+>)" . $segment . "(?![^<]+>)";
                }
                $with[] = is_array($format) ? $format[$key] : $format;
                $replace[] = sprintf($options["regex"], $segment);
            }
            return preg_replace($replace, $with, $text);
        } else {
            $phrase = "(" . preg_quote($phrase, "|") . ")";
            if ($html) {
                $phrase = "" . "(?![^<]+>)" . $phrase . "(?![^<]+>)";
            }
            return preg_replace(sprintf($options["regex"], $phrase), $format, $text);
        }
    }
    public static function stripLinks($text)
    {
        return preg_replace("|<a\\s+[^>]+>|im", "", preg_replace("|<\\/a>|im", "", $text));
    }
    public static function truncate($text, $length = 100, $options = array())
    {
        $default = array("ending" => "...", "exact" => true, "html" => false);
        $options = array_merge($default, $options);
        extract($options);
        if (!function_exists("mb_strlen")) {
            class_exists("Multibyte");
        }
        if ($html) {
            if (mb_strlen(preg_replace("/<.*?>/", "", $text)) <= $length) {
                return $text;
            }
            $totalLength = mb_strlen(strip_tags($ending));
            $openTags = array();
            $truncate = "";
            preg_match_all("/(<\\/?([\\w+]+)[^>]*>)?([^<>]*)/", $text, $tags, PREG_SET_ORDER);
            foreach ($tags as $tag) {
                if (!preg_match("/img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param/s", $tag[2])) {
                    if (preg_match("/<[\\w]+[^>]*>/s", $tag[0])) {
                        array_unshift($openTags, $tag[2]);
                    } else {
                        if (preg_match("/<\\/([\\w]+)[^>]*>/s", $tag[0], $closeTag)) {
                            $pos = array_search($closeTag[1], $openTags);
                            if ($pos !== false) {
                                array_splice($openTags, $pos, 1);
                            }
                        }
                    }
                }
                $truncate .= $tag[1];
                $contentLength = mb_strlen(preg_replace("/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i", " ", $tag[3]));
                if ($length < $contentLength + $totalLength) {
                    $left = $length - $totalLength;
                    $entitiesLength = 0;
                    if (preg_match_all("/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i", $tag[3], $entities, PREG_OFFSET_CAPTURE)) {
                        foreach ($entities[0] as $entity) {
                            if ($entity[1] + 1 - $entitiesLength <= $left) {
                                $left--;
                                $entitiesLength += mb_strlen($entity[0]);
                            } else {
                                break;
                            }
                        }
                    }
                    $truncate .= mb_substr($tag[3], 0, $left + $entitiesLength);
                    break;
                } else {
                    $truncate .= $tag[3];
                    $totalLength += $contentLength;
                    if ($length <= $totalLength) {
                        break;
                    }
                }
            }
        } else {
            if (mb_strlen($text) <= $length) {
                return $text;
            }
            $truncate = mb_substr($text, 0, $length - mb_strlen($ending));
        }
        if (!$exact) {
            $spacepos = mb_strrpos($truncate, " ");
            if ($html) {
                $truncateCheck = mb_substr($truncate, 0, $spacepos);
                $lastOpenTag = mb_strrpos($truncateCheck, "<");
                $lastCloseTag = mb_strrpos($truncateCheck, ">");
                if ($lastCloseTag < $lastOpenTag) {
                    preg_match_all("/<[\\w]+[^>]*>/s", $truncate, $lastTagMatches);
                    $lastTag = array_pop($lastTagMatches[0]);
                    $spacepos = mb_strrpos($truncate, $lastTag) + mb_strlen($lastTag);
                }
                $bits = mb_substr($truncate, $spacepos);
                preg_match_all("/<\\/([a-z]+)>/", $bits, $droppedTags, PREG_SET_ORDER);
                if (!empty($droppedTags)) {
                    if (!empty($openTags)) {
                        foreach ($droppedTags as $closingTag) {
                            if (!in_array($closingTag[1], $openTags)) {
                                array_unshift($openTags, $closingTag[1]);
                            }
                        }
                    } else {
                        foreach ($droppedTags as $closingTag) {
                            array_push($openTags, $closingTag[1]);
                        }
                    }
                }
            }
            $truncate = mb_substr($truncate, 0, $spacepos);
        }
        $truncate .= $ending;
        if ($html) {
            foreach ($openTags as $tag) {
                $truncate .= "</" . $tag . ">";
            }
        }
        return $truncate;
    }
    public static function excerpt($text, $phrase, $radius = 100, $ending = "...")
    {
        if (empty($text) || empty($phrase)) {
            return self::truncate($text, $radius * 2, array("ending" => $ending));
        }
        $append = $prepend = $ending;
        $phraseLen = mb_strlen($phrase);
        $textLen = mb_strlen($text);
        $pos = mb_strpos(mb_strtolower($text), mb_strtolower($phrase));
        if ($pos === false) {
            return mb_substr($text, 0, $radius) . $ending;
        }
        $startPos = $pos - $radius;
        if ($startPos <= 0) {
            $startPos = 0;
            $prepend = "";
        }
        $endPos = $pos + $phraseLen + $radius;
        if ($textLen <= $endPos) {
            $endPos = $textLen;
            $append = "";
        }
        $excerpt = mb_substr($text, $startPos, $endPos - $startPos);
        $excerpt = $prepend . $excerpt . $append;
        return $excerpt;
    }
    public static function toList($list, $and = "and", $separator = ", ")
    {
        if (1 < count($list)) {
            return implode($separator, array_slice($list, null, 0 - 1)) . " " . $and . " " . array_pop($list);
        }
        return array_pop($list);
    }
}

?>